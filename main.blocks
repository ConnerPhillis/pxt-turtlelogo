<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="jh{T6GRQ]adcX|nc.V3T" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="lng73[cRPCmI67|2JAa#" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TravelDirection {" line1="    //% block=&quot;ahead of me&quot;" line2="    Ahead = 2," line3="    //% block=&quot;behind me&quot;" line4="    Behind = 3," line5="    //% block=&quot;on my left&quot;" line6="    Left = 0," line7="    //% block=&quot;on my right&quot;" line8="    Right = 1" line9="    " line10="}" numlines="11"></mutation><next><block type="typescript_statement" id="2EA,`l_{?ITWt*q|l!LU" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace sprites {" line1="" line2="    //% block=&quot;$sprite=variables_get(mySprite) heading&quot;" line3="    //% group=&quot;Turtle Logo&quot;" line4="    //% weight=100" line5="    export function heading(sprite: Sprite) : number {" line6="        let r: number = Math.atan2(0-sprite.vy(), sprite.vx());" line7="        let d: number = r * 180.0 / Math.PI;" line8="        let d2: number = 450 - d;" line9="        return d2;" line10="    }" line11="" line12="    //% block=&quot;$sprite=variables_get(mySprite) speed&quot;" line13="    //% group=&quot;Turtle Logo&quot;" line14="    //% weight=98" line15="    export function speed(sprite: Sprite) : number {" line16="        let magnitude: number = Math.sqrt((sprite.vx() * sprite.vx()) + (sprite.vy() * sprite.vy()));" line17="        return magnitude;" line18="    }" line19="" line20="    //% block=&quot;set $sprite=variables_get(mySprite) heading to $heading&quot;" line21="    //% group=&quot;Turtle Logo&quot;" line22="    //% weight=99" line23="    export function setheading(sprite: Sprite, heading: number) {" line24="        let e: number = heading % 360;" line25="        let d22: number = 450 - e;" line26="        let s: number = d22 * Math.PI / 180.0;" line27="        let speed: number = sprites.speed(sprite);" line28="        // if speed is too low, heading won't get set" line29="        speed = Math.max(speed, 0.004);" line30="        let vx: number = speed * Math.cos(s);" line31="        let vy: number = 0.0 - (speed * Math.sin(s));" line32="        sprite.setVelocity(vx, vy);" line33="    }" line34="" line35="    //% block=&quot;set $sprite=variables_get(mySprite) speed to $speed&quot;" line36="    //% group=&quot;Turtle Logo&quot;" line37="    //% weight=97" line38="    export function setspeed(sprite: Sprite, speed: number) {" line39="        let t: number = Math.atan2(sprite.vy(), sprite.vx());" line40="        let vx2: number = speed * Math.cos(t);" line41="        let vy2: number = speed * Math.sin(t);" line42="        sprite.setVelocity(vx2, vy2);" line43="    }" line44="" line45="    //% block=&quot;left $sprite=variables_get(mySprite) by $delta_heading degrees&quot;" line46="    //% delta_heading.defl=90" line47="    //% group=&quot;Turtle Logo&quot;" line48="    //% weight=90" line49="    export function left(sprite: Sprite, delta_heading: number) {" line50="        let h: number = sprites.heading(sprite);" line51="        let new_h: number = (h - delta_heading) % 360;" line52="        sprites.setheading(sprite, new_h);" line53="    }" line54="" line55="    //% block=&quot;right $sprite=variables_get(mySprite) by $delta_heading degrees&quot;" line56="    //% delta_heading.defl=90" line57="    //% group=&quot;Turtle Logo&quot;" line58="    //% weight=89" line59="    export function right(sprite: Sprite, delta_heading: number) {" line60="        sprites.left(sprite, 0 - delta_heading);" line61="    }" line62="" line63="" line64="}" numlines="65"></mutation><next><block type="typescript_statement" id="^S%E3o+SpyR]{0m^5(+e" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace scene {" line1="" line2="    //% block=&quot;is $sprite=variables_get(mySprite) hitting wall $td&quot;" line3="    //% group=&quot;Collisions&quot;" line4="    //% td.defl=TravelDetection.Ahead" line5="    export function isWallinDirectionOfTravel(sprite: Sprite, td: TravelDirection) {" line6="        let cd: CollisionDirection;" line7="        let i: number = sprites.heading(sprite);" line8="        return i;" line9="        switch(td) {" line10="            case TravelDirection.Ahead:" line11="                if ((i &gt;= 0 &amp;&amp; i &lt; 45) || (i &gt;= 315 &amp;&amp; i &lt; 360)) {" line12="                    cd = CollisionDirection.Top;" line13="                } else if (i &gt;= 45 &amp;&amp; i &lt; 135) {" line14="                    cd = CollisionDirection.Right;" line15="                } else if (i &gt;= 135 &amp;&amp; i &lt; 225) {" line16="                    cd = CollisionDirection.Bottom;" line17="                } else if (i &gt;= 225 &amp;&amp; i &lt; 315) {" line18="                    cd = CollisionDirection.Left;" line19="                } " line20="                break;" line21="            case TravelDirection.Behind:" line22="                if ((i &gt;= 0 &amp;&amp; i &lt; 45) || (i &gt;= 315 &amp;&amp; i &lt; 360)) {" line23="                    cd = CollisionDirection.Bottom;" line24="                } else if (i &gt;= 45 &amp;&amp; i &lt; 135) {" line25="                    cd = CollisionDirection.Left;" line26="                } else if (i &gt;= 135 &amp;&amp; i &lt; 225) {" line27="                    cd = CollisionDirection.Top;" line28="                } else if (i &gt;= 225 &amp;&amp; i &lt; 315) {" line29="                    cd = CollisionDirection.Right;" line30="                } " line31="                break;" line32="            case TravelDirection.Left:" line33="                if ((i &gt;= 0 &amp;&amp; i &lt; 45) || (i &gt;= 315 &amp;&amp; i &lt; 360)) {" line34="                    cd = CollisionDirection.Left;" line35="                } else if (i &gt;= 45 &amp;&amp; i &lt; 135) {" line36="                    cd = CollisionDirection.Top;" line37="                } else if (i &gt;= 135 &amp;&amp; i &lt; 225) {" line38="                    cd = CollisionDirection.Right;" line39="                } else if (i &gt;= 225 &amp;&amp; i &lt; 315) {" line40="                    cd = CollisionDirection.Bottom;" line41="                } " line42="                break;" line43="            case TravelDirection.Right:" line44="                if ((i &gt;= 0 &amp;&amp; i &lt; 45) || (i &gt;= 315 &amp;&amp; i &lt; 360)) {" line45="                    cd = CollisionDirection.Right;" line46="                } else if (i &gt;= 45 &amp;&amp; i &lt; 135) {" line47="                    cd = CollisionDirection.Bottom;" line48="                } else if (i &gt;= 135 &amp;&amp; i &lt; 225) {" line49="                    cd = CollisionDirection.Left;" line50="                } else if (i &gt;= 225 &amp;&amp; i &lt; 315) {" line51="                    cd = CollisionDirection.Top;" line52="                } " line53="                break;" line54="" line55="        }" line56="        return cd;" line57="//        return sprite.isHittingTile(cd);" line58="    }" line59="" line60="}" numlines="61"></mutation></block></next></block></next></block></statement></block></xml>